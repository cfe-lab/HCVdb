import HyGo
import argparse
from csv import DictReader
from translation import translate

parser = argparse.ArgumentParser(
    description='Count amino acid frequencies from CSV output of parse-genbank.py. '
                'Record insertions relative to H77 in a separate column.'
)
parser.add_argument('infile', help='Path to input CSV generated by parse-genbank.py.')
parser.add_argument('root', help='Path and filename prefix to write CSV outputs.')
args = parser.parse_args()

hygo = HyGo.HyGo()

# change settings for protein alignment
hygo.set_alphabet(HyGo.amino_alphabet)
hygo.set_matrix(HyGo.blosum62)
hygo.set_gap_open(7, True)
hygo.set_gap_open(7, False)
hygo.set_gap_extend(1, True)
hygo.set_gap_extend(1, False)


# prepare outputs
outputs = {}
h77 = {}
with open('data/h77-genes.csv', 'rU') as f:
    for line in f:
        gene, seq = line.strip('\n').split(',')
        prot = translate(seq, 0).strip('*')
        h77.update({gene: prot})

        outfile = open('%s.%s.csv' % (args.root, gene), 'w')
        outputs.update({gene: outfile})
        outfile.write('accession')
        for i, aa in enumerate(prot):
            outfile.write(',%s%d' % (aa, i+1))
        outfile.write(',inserts\n')


reader = DictReader(open(args.infile, 'rU'))

for rcount, row in enumerate(reader):
    accno = row['accession']
    for gene, refseq in h77.iteritems():
        seq = row[gene].replace('-', '')
        if len(seq) == 0:
            # skip genes with no coverage in record
            continue

        best_frame = 0
        best_results = {'score': -1000}
        for frame in range(3):
            prot = translate(seq, frame).rstrip('*')
            results = hygo.align(refseq, prot)
            if results['score'] > best_results['score']:
                best_results = results
                best_frame = frame

        # TODO: detect frame-shifts
        # TODO: process insertions
        ascore = best_results['score']
        aref = best_results['ref']
        aquery = best_results['query']

        left, right = HyGo.get_boundaries(aref)
        overlap = sum(map(lambda i: aref[i] not in '?-' and aquery[i] not in '?-',
                          range(left, right)))
        if overlap == 0:
            continue

        relscore = ascore / float(overlap)
        #print ','.join(map(str, [accno, gene, aref, aquery, ascore, overlap, relscore]))

        if '*' in aquery and relscore < 6.0:
            # potential frameshift
            continue

        # write output
        outputs[gene].write(accno)
        ref_coord = 1
        inserts = {}
        left2, right2 = HyGo.get_boundaries(aquery)
        for i in range(left, right):
            #print gene, i, aref[i], aquery[i]
            if aref[i] == '-':
                # insertion relative to reference
                if ref_coord not in inserts:
                    inserts.update({ref_coord: ''})
                inserts[ref_coord] += aquery[i]
                continue

            aa = aquery[i]
            if aa == '-' and (i < left2 or i >= right2):
                # ignore gap prefix/suffix
                aa = ''

            if aa == '?':
                aa = ''

            outputs[gene].write(',%s' % (aa,))
            ref_coord += 1

        # output inserts
        outputs[gene].write(',')
        keys = inserts.keys()
        keys.sort()
        outputs[gene].write(';'.join(['%d+%s' % (k, inserts[k]) for k in keys]))

        outputs[gene].write('\n')




